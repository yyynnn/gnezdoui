{"version":3,"sources":["C:/Users/Tom/gnezdoui/src/hooks/useWindowSize.js","C:/Users/Tom/gnezdoui/src/hooks/useWindowSize.mdx","C:/Users/Tom/gnezdoui/src/utils/universalRoot.js"],"names":["useWindowSize","useState","width","root","innerWidth","height","innerHeight","windowSize","setWindowSize","useEffect","handler","addEventListener","removeEventListener","name","layoutProps","MDXContent","components","props","mdxType","Playground","__position","__code","__scope","this","Props","__codesandbox","isMDXComponent","self","global"],"mappings":"idAAA,qCAEA,oCAEaA,EAAgB,WAAO,IAAD,GACG,IAAAC,UAAS,CAC3CC,MAAOC,OAAKC,WACZC,OAAQF,OAAKG,cAHkB,qBAC1BC,EAD0B,KACdC,EADc,KAiBjC,OAXA,IAAAC,YAAU,WACR,IAAMC,EAAU,WACdF,EAAc,CACZN,MAAOC,OAAKC,WACZC,OAAQF,OAAKG,eAIjB,OADAH,OAAKQ,iBAAiB,SAAUD,GACzB,kBAAMP,OAAKS,oBAAoB,SAAUF,MAC/C,IAEIH,G,wkBCdaM,E,+EALpB,GADA,sCACA,oDAEF,6CACA,oCAOMC,GALgBD,EAIU,YACZ,IAIL,SAASE,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,+BACD,OAAO,SALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAE5E,cAAQ,CACN,GAAM,iBADR,kBAGA,SAAC,EAAAC,WAAD,CAAYC,WAAY,EAAGC,OAAQ,mRAA4QC,QAAS,CACtTL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BE,wBACAK,cACAxB,+BACCyB,cAAa,YAAeP,QAAQ,eACxC,WAWK,OAAO,UAVW,WAAO,IAAD,GAIlB,IAAAlB,iBAFFE,EAFoB,EAEpBA,MACAG,EAHoB,EAGpBA,OAEF,OAAO,+CACgB,kBAAIH,EAAJ,MADhB,cAC0C,kBAAIG,EAAJ,MAD1C,yBAKF,CAAWa,QAAQ,kB,mLAMlCH,EAAWW,gBAAiB,G,oZChDfvB,EACM,YAAhB,qBAAOwB,KAAP,0BAAOA,QAAqBA,KAAKA,OAASA,MAAQA,MAChC,YAAlB,qBAAOC,EAAP,0BAAOA,KAAuBA,EAAOA,SAAWA,GAAUA,QAD3D,E","file":"static/js/src-hooks-use-window-size.b118e121.js","sourcesContent":["import { useEffect, useState } from 'react'\n\nimport { root } from 'utils/universalRoot'\n\nexport const useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState({\n    width: root.innerWidth,\n    height: root.innerHeight\n  })\n\n  useEffect(() => {\n    const handler = () => {\n      setWindowSize({\n        width: root.innerWidth,\n        height: root.innerHeight\n      })\n    }\n    root.addEventListener('resize', handler)\n    return () => root.removeEventListener('resize', handler)\n  }, [])\n\n  return windowSize\n}\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz'\nimport { useWindowSize } from './useWindowSize'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Component = makeShortcode(\"Component\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"usewindowsize\"\n    }}>{`useWindowSize`}</h1>\n    <Playground __position={0} __code={'() => {\\n  const Component = () => {\\n    const { width, height } = useWindowSize()\\n    return (\\n      <div>\\n        Browser page window is <b>{width}px</b> wide and <b>{height}px</b>{\\' \\'}\\n        high! ðŸ¦„\\n      </div>\\n    )\\n  }\\n  return <Component />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      useWindowSize\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const Component = () => {\n          const {\n            width,\n            height\n          } = useWindowSize();\n          return <div>\n          Browser page window is <b>{width}px</b> wide and <b>{height}px</b> high! ðŸ¦„\n        </div>;\n        };\n\n        return <Component mdxType=\"Component\" />;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","export const root =\n  (typeof self === 'object' && self.self === self && self) ||\n  (typeof global === 'object' && global.global === global && global) ||\n  this\n"],"sourceRoot":""}